openapi: 3.0.0
info:
  title: Medical Assistant API
  version: "1.0.0"
  description: API для управления пользователями, врачами и ИИ-ассистентом в сфере медицины через бота Telegram.
  
paths:
  /auth:
    post:
      summary: Создание нового пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Неверные данные
    get:
      summary: Получение пользователя по Telegram ID
      parameters:
        - name: tg_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Пользователь не найден
          
  /doctors/{speciality}:
    get:
      summary: Получение врачей по специальности
      parameters:
        - name: speciality
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Список врачей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctors'
        "404":
          description: Врачи по специальности не найдены

  /doctors:
    post:
      summary: Добавление нового врача
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctors'
      responses:
        "201":
          description: Врач успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctors'
        "400":
          description: Неверные данные

  /api/v1/sendMessage:
    post:
      summary: Отправка медицинских данных пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_data'
      responses:
        "201":
          description: Данные пользователя успешно записаны
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_data'
        "400":
          description: Неверные данные

  /api/v1/request_to_openai:
    post:
      summary: Запрос ответа от ИИ на основе данных пользователя
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                message:
                  type: string
      responses:
        "200":
          description: Ответ ИИ сгенерирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        "404":
          description: Данные пользователя не найдены
        "400":
          description: Отсутствует идентификатор пользователя или сообщение

  /api/v1/upload_mp3_to_text:
    post:
      summary: Загрузка MP3-файла и его расшифровка
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Транскрипция и ответ ИИ
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        "400":
          description: Неверный тип файла
        "500":
          description: Внутренняя ошибка сервера

components:
  schemas:
    User:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        tg_id:
          type: string
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        avatar_url:
          type: string
          nullable: true
      example:
        uid: "123e4567-e89b-12d3-a456-426614174000"
        tg_id: "123456789"
        username: "john_doe"
        name: "John"
        surname: "Doe"
        avatar_url: "http://example.com/avatar.jpg"
    
    User_data:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        user_id:
          type: string
        height:
          type: string  
        weight:
          type: string  
        age:
          type: string  
          format: date-time
        sex:
          type: string
        symptoms:
          type: string
      example:
        uid: "123e4567-e89b-12d3-a456-426614174000"
        user_id: "123456789"
        height: "180"
        weight: "75"
        age: "26"
        sex: "male"
        symptoms: "fever, headache"

    OpenAI_Answer:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        user_id:
          type: string
        created_at:
          type: string
          format: date-time
        answer:
          type: string
        emergence:
          type: string
        language:
          type: string
      example:
        uid: "123e4567-e89b-12d3-a456-426614174000"
        user_id: "123456789"
        created_at: "2024-10-18T10:00:00"
        answer: "This is an AI-generated medical answer."
        emergence: "based"
        language: "ru"

    Doctors:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        doctor_id:
          type: string
        name:
          type: string
        surname:
          type: string
        avatar_url:
          type: string
          nullable: true
        speciality:
          type: string
        experience:
          type: string  
        rating:
          type: string  
        price:
          type: string  
        description:
          type: string
        email:
          type: string
      example:
        uid: "123e4567-e89b-12d3-a456-426614174000"
        doctor_id: "456"
        name: "Dr. Alice"
        surname: "Smith"
        avatar_url: "http://example.com/avatar.jpg"
        speciality: "Cardiologist"
        experience: "15"
        rating: "4.9"
        price: "150.0"
        description: "Expert cardiologist with 15 years of experience."
        email: "dr.alice@example.com"
